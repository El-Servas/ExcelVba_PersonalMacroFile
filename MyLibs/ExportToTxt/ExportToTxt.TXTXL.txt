Representación Textual del archivo de Excel: "ExportToTxt.xls"

Resumen
=======

 * Hojas: 1

 * Nombres Definidos: 0

 * Módulos de Visual Basic: 7

 * Líneas de código VB: 786

Detalle
=======

Hojas:
 [Sheet1]

Contenido:
[Sheet1]

Nombres:

Nombre del proyecto VB: [Lib_ExportToTxt]

Módulos VBA:
 [ThisWorkbook] Tipo: 100
 [Sheet1] Tipo: 100
 [Lib] Tipo: 1
 [Plantillas] Tipo: 1
 [ExportClass] Tipo: 2
 [LibClass] Tipo: 2
 [DvInfoClass] Tipo: 2

Codigo:
[ThisWorkbook] 6 líneas de código.
///--- BEGINNING OF MODULE ---
Option Explicit

Private Sub Workbook_BeforeSave(ByVal SaveAsUI As Boolean, Cancel As Boolean)
Lib.Main ThisWorkbook
End Sub

\\\--- END OF MODULE ---

[Sheet1] 0 líneas de código.
///--- BEGINNING OF MODULE ---
\\\--- END OF MODULE ---

[Lib] 38 líneas de código.
///--- BEGINNING OF MODULE ---
'---------------------------------------------------------------------------------------
' Librería: Exporta una representación textual de un libro de Excel
'---------------------------------------------------------------------------------------
Global Const PRINT_PROC_DELIMITERS As Boolean = False

Option Explicit
Public Const VERSION As String = "v2.12.1"
'---------------------------------------------------------------------------------------

Public Const LIB_NAME As String = "Lib_ExportToTxt"
Public Const LIB_FRIENDLY_NAME As String = "Exportación a Texto"

Public ErrNum, ErrDesc

'----------------------------------------------------------------------------------------------------
'Purpose: Punto de entrada principal a la librería.
'----------------------------------------------------------------------------------------------------
Public Sub Main(bookToExport As Workbook, Optional visual As Boolean = False)
    Dim Exporter As New ExportClass
    Exporter.Main bookToExport, visual
End Sub

'----------------------------------------------------------------------------------------------------
'Purpose: Regresa el objeto real de librería
'----------------------------------------------------------------------------------------------------
Public Function GetLib()
Debug.Print "> Inicio Lib.GetLib()"
On Error GoTo Outer_Error

    Set GetLib = New LibClass
On Error GoTo 0
Outer_Error: 'Error Handler v1.1 - 2013-06-19 by +
    If Err.Number <> 0 Then Debug.Print "[" & ThisWorkbook.name & "!Lib.GetLib] " & Err.Number & ". " & Err.Description
    Debug.Print "> Fin Lib.GetLib()": Debug.Print
    'Descomentar si esta rutina se va a llamar desde otro módulo/proyecto:
    ErrNum = Err.Number: ErrDesc = Err.Description
End Function

\\\--- END OF MODULE ---

[Plantillas] 17 líneas de código.
///--- BEGINNING OF MODULE ---
Option Explicit

Public ErrNum, ErrDesc 'Para que compile el proyecto.

Sub PlantillaParaDelegado()
On Error GoTo DelegateError
    'Código aquí.
    'Si el delegado regresa valor, es buena idea asignarlo de inmediato, si se tiene un valor default.
DelegateError:
    ErrNum = Err.Number: ErrDesc = Err.Description 'ErrNum y ErrDesc deben de estar definidas a nivel módulo.
End Sub

Sub PlantillaParaLlamarADelegado()
    'ErrNum y ErrDesc deben de estar definidas y accesibles en el módulo donde esté el delegado (Si fuera otro)
    ErrNum = 0: Application.Run "NombreDelDelegado" ',Más, parámetros, etc
    If ErrNum <> 0 Then Err.Raise ErrNum, , ErrDesc
End Sub
\\\--- END OF MODULE ---

[ExportClass] 497 líneas de código.
///--- BEGINNING OF MODULE ---
Option Explicit
'---------------------------------------------------------------------------------------
' Module    : ExportClass
' Author    : +
' Date      : 18/06/2013
' Purpose   : Encapsula la funcionalidad de la exportación.
'---------------------------------------------------------------------------------------

Private ErrNum, ErrDesc
'---------------------------------------------------------------------------------------

Private Const TOKEN_PRE_EXTENSION = ".TXTXL"
Private Const TOKEN_EXTENSION = ".txt"

Private Const TOKEN_HEADER = "Representación Textual del archivo de Excel: "
Private Const TOKEN_SEPARATOR As String = "----------------------------------------------------------------------------------------------------"
Private Const TOKEN_HOJAS_TITLE = "Hojas:"
Private Const TOKEN_CONTENT_TITLE = "Contenido:"
Private Const TOKEN_NOMBRES_TITLE = "Nombres:"
Private Const TOKEN_MODULOS_TITLE = "Módulos VBA:"
Private Const TOKEN_CODIGO_TITLE = "Codigo:"
Private Const TOKEN_MODULE_BEGINS = "///--- BEGINNING OF MODULE ---"
Private Const TOKEN_MODULE_END = "\\\--- END OF MODULE ---"
Private Const SHEET_TITLE_CELL_LISTING_THRESHOLD = 25 'El número de celdas entre la etiqueta de la hoja en el listado de celdas
Private Const TOKEN_VBPROJECT_PROTECTED As String = "El proyecto VB está protegido y no hay acceso a los módulos."
Private Const TOKEN_BOOK_IN_AUTOSTART As String = "El libro está en la ruta de auto-ejecución de Excel. No se exportará."

Private Const TOKEN_MESSAGEBOX_TITLE As String = LIB_FRIENDLY_NAME
Private Const ERROR_1 As String = "Proceso cancelado manualmente."
Private Const ERROR_2 As String = TOKEN_BOOK_IN_AUTOSTART

Private RH 'La clase RunHelper.
Private Utils
Private FSO As New Scripting.FileSystemObject
Private Logger As Object
Private DvInfo As DvInfoClass 'Clase que nos va a dar la información de DataValidation.
Private flVisual As Boolean 'Define si la ejecución es con confirmación visual.
Private flBookInAutoStartPath As Boolean 'Indica si el libro a exportar está en la ruta automática.
Private flVBProjectIsProtected As Boolean 'Indica si el proyecto VB está protegido.

Private BTE As Workbook '(BookToExport) Referencia al libro que vamos a exportar.
Private StartTime As Date _
        , EllapsedSeconds As Long _
        , EllapsedLegend As String 'Para cronometrar el proceso.

Private Sub Class_Initialize()
    Set RH = Application.Run("Personal.xlsb!GetRunHelper")
    Set Utils = RH.GetUtils()
    Set FSO = Utils.GetFSO()
    Set Logger = RH.GetLogger()
    Set DvInfo = New DvInfoClass
End Sub

Sub Main(bookToExport As Workbook, Optional visual As Boolean = False)
On Error GoTo Catch
    Set BTE = bookToExport
    flVisual = visual
    PreFlight
   
    'Inicio del proceso. Confirmación visual si aplica.
    If flVisual Then If Not ConfirmarEjecucion Then Err.Raise vbObjectError + 1, , ERROR_1
    
    If Not flBookInAutoStartPath Then
        Logger.ErrNum = 0: Logger.CreateNewStream (GetTXTFileName())
        If Logger.ErrNum <> 0 Then Err.Raise Logger.ErrNum, , Logger.ErrDesc
        SaveSettings
        StartTime = Date + Time
        
        GenResumen
        
        GenHojas
        GenNombres
        GenModulos
        
        MensajeFinal
    
        'Fin del proceso. Confirmación visual si aplica.
        If flVisual Then Call MsgBox("Proceso terminado en " & EllapsedLegend & "", vbInformation Or vbDefaultButton1, TOKEN_MESSAGEBOX_TITLE)
    End If
Catch:
    If Err.Number <> 0 Then
        Dim MensajeDeError As String
        MensajeDeError = "Ocurrió un error al correr el proceso de exportación:" & vbCrLf & vbCrLf _
            & Err.Number & " " & Err.Description
        MsgBox MensajeDeError, vbCritical, TOKEN_MESSAGEBOX_TITLE
        Logger.Log MensajeDeError
    End If
    
    RestoreSettings
    Set Logger = Nothing
End Sub

'----------------------------------------------------------------------------------------------------
'Purpose: Realiza unas verificaciones antes de iniciar el proceso de exportación.
'----------------------------------------------------------------------------------------------------
Sub PreFlight()
    'Revisa la ruta de exclusión.
    If Utils.IsAutoStartPath(BTE.Path) Then
        flBookInAutoStartPath = True
        Debug.Print "El archivo a exportar está en la ruta AutoStart."
    Else
        flBookInAutoStartPath = False
    End If
    
    'Ajusta la bandera si el proyecto de VB está protegido.
    flVBProjectIsProtected = BTE.VBProject.Protection = vbext_pp_locked
End Sub

Function GetTXTFileName() As String
    Dim NombreDelArchivo As String _
    , Ruta As String _
    , NombreCompleto As String
    
    NombreDelArchivo = FSO.GetBaseName(BTE.name) & TOKEN_PRE_EXTENSION & TOKEN_EXTENSION
    Ruta = BTE.Path
    NombreCompleto = FSO.BuildPath(Ruta, NombreDelArchivo)
    
    GetTXTFileName = NombreCompleto
End Function

'----------------------------------------------------------------------------------------------------
'Purpose: 'Despliega la confirmación visual inicial y regresa si se continúa o se cancela el proceso.
'----------------------------------------------------------------------------------------------------
Function ConfirmarEjecucion() As Boolean
    'Preparamos el mensaje, aprovechando que ya se hizo el PreFlight.
    Dim MensajeConfirmacion As String
    'Intro del mensaje con el nombre del archivo a exportar.
    MensajeConfirmacion = "Inicio del proceso de exportación a texto del archivo:" & vbCrLf _
        & BTE.name & vbCrLf & vbCrLf _
        & "Dependiento del tamaño y complejidad del libro, puede tardar algunos minutos." & vbCrLf & vbCrLf
    
    MensajeConfirmacion = MensajeConfirmacion & "Verificación previa:" & vbCrLf
    'Libro en la ruta AutoStart
    If flBookInAutoStartPath Then
        MensajeConfirmacion = MensajeConfirmacion & "* " & UCase(TOKEN_BOOK_IN_AUTOSTART) & vbCrLf
    End If
    
    'Estado de la protección del proyecto VB.
    If flVBProjectIsProtected Then
        MensajeConfirmacion = MensajeConfirmacion & "* " & UCase(TOKEN_VBPROJECT_PROTECTED) & vbCrLf
    Else
        MensajeConfirmacion = MensajeConfirmacion & "* " & "El proyecto de Visual Basic es accesible." & vbCrLf
    End If
    
    'Separador
    MensajeConfirmacion = MensajeConfirmacion & vbCrLf
    
    'Pie del mensaje con el número de la versión.
    MensajeConfirmacion = MensajeConfirmacion & GenVersionString()
                   
    Select Case MsgBox(MensajeConfirmacion, vbOKCancel Or vbInformation Or vbDefaultButton1, TOKEN_MESSAGEBOX_TITLE)
    Case vbOK
        ConfirmarEjecucion = True
    End Select
End Function

'----------------------------------------------------------------------------------------------------
'Purpose: Construye un string que va a identificar la librería, el archivo que la contiene y la versión.
'----------------------------------------------------------------------------------------------------
Function GenVersionString() As String
    GenVersionString = LIB_NAME & " [" & ThisWorkbook.name & "] " & VERSION
End Function

'====================================================================================================
'RESUMEN
'====================================================================================================

Sub GenResumen()
    ' - Nombre del archivo
    GenEncabezado
    
    Logger.Log "Resumen" & vbCrLf & "======="
    Logger.Log
    
    Dim NumeroHojas As Integer: NumeroHojas = GetNumHojas
    Logger.Log " * Hojas: " & NumeroHojas
    Logger.Log
    
    Dim NumeroNombresDefinidos As Integer: NumeroNombresDefinidos = GetNumNombres
    Logger.Log " * Nombres Definidos: " & NumeroNombresDefinidos
    Logger.Log
    
    If Not flVBProjectIsProtected Then
        Dim NumeroModulosVB As Integer: NumeroModulosVB = GetNumModulosVB
        Logger.Log " * Módulos de Visual Basic: " & NumeroModulosVB
        Logger.Log
        
        Dim NumeroLineasCodigo As Integer: NumeroLineasCodigo = GetNumLineas
        Logger.Log " * Líneas de código VB: " & NumeroLineasCodigo
    Else
        Logger.Log TOKEN_VBPROJECT_PROTECTED
    End If
    Logger.Log
    
    Logger.Log "Detalle" & vbCrLf & "======="
    Logger.Log
End Sub

Sub GenEncabezado()
    Logger.Log TOKEN_HEADER & """" & BTE.name & """"
    If flVisual Then Logger.Log "Fecha y hora de generación: " & Date + Time
    Logger.Log
End Sub

Function GetNumHojas() As Integer
    GetNumHojas = BTE.Worksheets.Count
End Function

Function GetNumNombres() As Integer
    GetNumNombres = BTE.Names.Count
End Function

Function GetNumModulosVB() As Integer
    GetNumModulosVB = BTE.VBProject.VBComponents.Count
End Function

Function GetNumLineas() As Integer
    'Iteramos los componentes para contar las líneas.
    Dim NumLineas As Integer
    Dim vbc As vbcomponent
    For Each vbc In BTE.VBProject.VBComponents
        NumLineas = NumLineas + vbc.CodeModule.CountOfLines
    Next
    GetNumLineas = NumLineas
End Function

'====================================================================================================

Sub GenHojas()
    '--- Lista de hojas
    Logger.Log TOKEN_HOJAS_TITLE
    IteraHojas "ImprimeNombreDeHoja"
    Logger.Log
    
    '--- Contenido de cada hoja
    Logger.Log TOKEN_CONTENT_TITLE
    IteraHojas "ProcesaContenidoDeHoja"
End Sub

Sub GenNombres()
    Logger.Log TOKEN_NOMBRES_TITLE
    IteraNombres "ImprimeNombre"
    Logger.Log
End Sub

Sub GenModulos()
    Logger.Log "Nombre del proyecto VB: [" & BTE.VBProject.name & "]"
    Logger.Log
    
    'Antes de intentar acceder a los módulos, verificamos que el proyecto no esté protegido:
    If Not flVBProjectIsProtected Then
        Logger.Log TOKEN_MODULOS_TITLE
        IteraModulos "ImprimeNombreDeModulo"
        Logger.Log
        
        Logger.Log TOKEN_CODIGO_TITLE
        IteraModulos "ProcesaModulo"
    Else
        Logger.Log TOKEN_VBPROJECT_PROTECTED
    End If
    Logger.Log
End Sub

'MODULOS VB
'====================================================================================================

'Delegate
Sub ProcesaModulo(vbcomp As vbcomponent, iterationIndex As Integer)
On Error GoTo DelegateError
    Dim CodeLines As Integer
    CodeLines = vbcomp.CodeModule.CountOfLines
    Logger.Log "[" & vbcomp.name & "] " & CodeLines & " líneas de código."
    
    Logger.Log TOKEN_MODULE_BEGINS
    If CodeLines > 0 Then
        Logger.Log vbcomp.CodeModule.Lines(1, CodeLines)
    End If
    Logger.Log TOKEN_MODULE_END
    
    Logger.Log
DelegateError:
    ErrNum = Err.Number: ErrDesc = Err.Description
End Sub

'Delegate
Sub ImprimeNombreDeModulo(vbcomp As vbcomponent, iterationIndex As Integer)
On Error GoTo DelegateError
    Logger.Log " [" & vbcomp.name & "] Tipo: " & vbcomp.Type
DelegateError:
    ErrNum = Err.Number: ErrDesc = Err.Description
End Sub

'Delegate caller
Sub IteraModulos(DelegateName As String)
    Dim vbcomponent As vbcomponent
    Dim ix As Integer
    ix = 0
    On Error GoTo ErrorAccesandoVBProject
    For Each vbcomponent In BTE.VBProject.VBComponents
        ix = ix + 1
        ErrNum = 0: CallByName Me, DelegateName, VbMethod, vbcomponent, ix
        If ErrNum <> 0 Then Err.Raise ErrNum, , ErrDesc
    Next
ErrorAccesandoVBProject: 'Si truena no hacemos nada.
    Exit Sub
End Sub

'RANGOS NOMBRADOS
'====================================================================================================

'Delegate
Sub ImprimeNombre(name As name, iterationIndex As Integer)
On Error GoTo DelegateError
    Logger.Log " [" & name.name & "] " & name.RefersTo
DelegateError:
    ErrNum = Err.Number: ErrDesc = Err.Description
End Sub

'Delegate caller
Sub IteraNombres(DelegateName As String)
    Dim name As name
    Dim ix As Integer
    ix = 0
    For Each name In BTE.Names
        ix = ix + 1
        ErrNum = 0: CallByName Me, DelegateName, VbMethod, name, ix
        If ErrNum <> 0 Then Err.Raise ErrNum, , ErrDesc
    Next
End Sub

'HOJAS
'====================================================================================================

'Delegate
Sub ImprimeNombreDeHoja(sheet As Worksheet, iterationIndex As Integer)
On Error GoTo DelegateError
    Dim Mensaje As String
    If Not sheet.Visible Then Mensaje = Mensaje & " - Escondida"
    If sheet.ProtectContents Then Mensaje = Mensaje & " - Protegida"
    Logger.Log " [" & sheet.name & "]" & Mensaje
DelegateError:
    ErrNum = Err.Number: ErrDesc = Err.Description
End Sub

'Delegate
Sub ProcesaContenidoDeHoja(sheet As Worksheet, iterationIndex As Integer)
On Error GoTo DelegateError

    Application.StatusBar = "Exportando hoja " & iterationIndex & " de " & sheet.Parent.Worksheets.Count & " - [" & sheet.name & "]"

    'Determinamos si la hoja está protegida y hay que desprotegerla.
    Dim Mensaje As String
    Dim BkHojaProtegida As Boolean
    If sheet.ProtectContents Then
        BkHojaProtegida = True
        Mensaje = Mensaje & " - Hoja Protegida"
        
        'La intentamos desproteger
        On Error Resume Next: sheet.Unprotect " "
        
        If Not sheet.ProtectContents Then
            Mensaje = Mensaje & " - Se desprotegió sin contraseña."
        Else
            Mensaje = Mensaje & " - NO SE DESPROTEGIÓ."
        End If
    End If
    
    'Procesamos las celdas.
    Logger.Log "[" & sheet.name & "]" & Mensaje
    IteraCeldas sheet, "ProcesaCelda"
    Logger.Log
    
    'Reprotegemos si es necesario
    If BkHojaProtegida Then sheet.Protect
    
    Application.StatusBar = False
DelegateError:
    ErrNum = Err.Number: ErrDesc = Err.Description
End Sub

'Delegate caller
Sub IteraHojas(DelegateName As String)
    Dim sheet As Worksheet
    Dim ix As Integer
    ix = 0
    For Each sheet In BTE.Worksheets
        ix = ix + 1
        ErrNum = 0: CallByName Me, DelegateName, VbMethod, sheet, ix
        If ErrNum <> 0 Then Err.Raise ErrNum, , ErrDesc
    Next
End Sub

'CELDAS
'====================================================================================================

'Delegate
Function ProcesaCelda(cell As Range, iterationIndex As Integer) As Integer
On Error GoTo DelegateError
    ProcesaCelda = iterationIndex 'Inmediatamente establecemos el valor
    
    Dim Direccion As String
    Dim Contenido As String
    Dim NombreDefinido As String
    Dim CeldaSeProcesa As Boolean
    
    If cell.FormulaHidden And cell.Parent.ProtectContents Then 'Fórmula escondida y la hoja está protegida.
        CeldaSeProcesa = True
        Contenido = "**FÓRMULA INACCESIBLE**"
    ElseIf cell.Formula <> "" Then 'Fórmula accesible, pero que no esté vacía.
        CeldaSeProcesa = True
        Contenido = cell.Formula
    End If
    
    If CeldaSeProcesa Then
        'Insertamos el nombre de la hoja cada N celdas
        If iterationIndex Mod SHEET_TITLE_CELL_LISTING_THRESHOLD = 0 And iterationIndex <> 0 Then
            Logger.Log "[" & cell.Parent.name & "]"
        End If
        Direccion = cell.Address(False, False): Direccion = "[" & Direccion & "] "
        NombreDefinido = GetNameOfCell(cell): If NombreDefinido <> "" Then NombreDefinido = "(" & NombreDefinido & ") "
        Contenido = "\" & Contenido & "\"
        Logger.Log Direccion & NombreDefinido & Contenido
        
        'Reportamos si la celda tiene DV o no:
        If DvInfo.CellHasValidation(cell) Then
            Logger.Log DvInfo.GetDVInfo()
            Logger.Log
        End If
        
        ProcesaCelda = iterationIndex + 1
    End If
DelegateError:
    ErrNum = Err.Number: ErrDesc = Err.Description
End Function

'Delegate caller
Sub IteraCeldas(sheet As Worksheet, DelegateName As String)
    Dim cell As Range, column As Range
    Dim ix As Integer
    ix = 0
    For Each column In sheet.UsedRange.Cells.Columns
        For Each cell In column.Cells
            ErrNum = 0: ix = CallByName(Me, DelegateName, VbMethod, cell, ix)
            If ErrNum <> 0 Then Err.Raise ErrNum, , ErrDesc
        Next
        DoEvents
    Next
End Sub

Function GetNameOfCell(cell As Range) As String
    On Error GoTo NoName
    GetNameOfCell = cell.name.name
Exit Function
NoName:
    GetNameOfCell = ""
End Function

'====================================================================================================

Sub SaveSettings()
    On Error Resume Next: Application.Calculation = xlCalculationManual: On Error GoTo 0
    Application.ScreenUpdating = False
    Application.EnableEvents = False
    'Application.Interactive = False
End Sub

Sub RestoreSettings()
    On Error Resume Next: Application.Calculation = xlCalculationAutomatic: On Error GoTo 0
    Application.Interactive = True
    Application.ScreenUpdating = True
    Application.EnableEvents = True
End Sub

'----------------------------------------------------------------------------------------------------
'Purpose: Construye y loguea el mensaje final. Incluye la duración del proceso si fue visual.
'----------------------------------------------------------------------------------------------------
Sub MensajeFinal()
    Dim MensajeFinal As String
    
    CalculaTiempoEmpleado
    
    'Construimos el mensaje.
    MensajeFinal = "** Fin del proceso de exportación."
    If flVisual Then MensajeFinal = MensajeFinal & " Proceso realizado en " & EllapsedLegend & " "
    MensajeFinal = MensajeFinal & " **"
    
    Logger.Log MensajeFinal
    Logger.Log GenVersionString()
End Sub

'----------------------------------------------------------------------------------------------------
'Purpose: Calcula y formatea el tiempo utilizado.
'----------------------------------------------------------------------------------------------------
Sub CalculaTiempoEmpleado()
    EllapsedSeconds = DateDiff("s", StartTime, Date + Time)
    EllapsedLegend = Utils.FormatEllapsedTime(EllapsedSeconds)
End Sub
\\\--- END OF MODULE ---

[LibClass] 18 líneas de código.
///--- BEGINNING OF MODULE ---
Option Explicit

Public ErrNum, ErrDesc

Public Function Init() As Object
Debug.Print "> Inicio LibClass.Init()"
On Error GoTo Outer_Error

    'Set Init = Me
    Set Init = New ExportClass
On Error GoTo 0
Outer_Error: 'Error Handler v1.1 - 2013-06-19 by +
    If Err.Number <> 0 Then Debug.Print "[" & ThisWorkbook.name & "!LibClass.Init] " & Err.Number & ". " & Err.Description
    Debug.Print "> Fin LibClass.Init()": Debug.Print
    'Descomentar si esta rutina se va a llamar desde otro módulo/proyecto:
    ErrNum = Err.Number: ErrDesc = Err.Description
End Function

\\\--- END OF MODULE ---

[DvInfoClass] 210 líneas de código.
///--- BEGINNING OF MODULE ---
Option Explicit

Public ErrNum, ErrDesc

Private cell As Range 'La celda a examinar

'----------------------------------------------------------------------------------------------------
'Purpose: Asigna la celda a examinar.
'----------------------------------------------------------------------------------------------------
Public Sub SetCellToExamine(celda As Range)
    Set cell = celda
End Sub

'----------------------------------------------------------------------------------------------------
'Purpose: Verdadero si la celda tiene Data Validation asociada.
'----------------------------------------------------------------------------------------------------
Public Function CellHasValidation(celda As Range) As Boolean
    SetCellToExamine celda
On Error GoTo NoValidation
    Dim dummy As XlDVType
    dummy = celda.Validation.Type
    CellHasValidation = True
Exit Function
NoValidation:
End Function

'----------------------------------------------------------------------------------------------------
'Purpose: Reune la información relevante de la data validation y lo regresa como un string para ser exportado.
'----------------------------------------------------------------------------------------------------
Public Function GetDVInfo() As String
    Dim Res As String
    Dim DVType As Long
    Dim Prefijo As String
    
    DVType = GetDVType(cell)
    Prefijo = " DataValidation: "
    Prefijo = Prefijo & GetDVTypeName(DVType)
    
    Select Case DVType
    Case XlDVType.xlValidateInputOnly '0
        Prefijo = Prefijo & "."
    
    Case XlDVType.xlValidateList '3
        Prefijo = Prefijo & ". [" & GetDVListInfo(cell.Validation) & "]"
        
    Case XlDVType.xlValidateCustom '7
        Prefijo = Prefijo & ". [" & GetDVCustomTypeInfo(cell.Validation) & "]"
        
    Case Else
        Prefijo = Prefijo & ". [" & GetDVSharedTypesInfo(cell.Validation) & "]"
        
    End Select
    
    Res = Prefijo
    Res = Res & vbCrLf
    
    Res = Res & " " & GetDVGeneralInfo(cell.Validation)
    
    GetDVInfo = Res
End Function

'----------------------------------------------------------------------------------------------------
'Purpose: Regresa el XlDVType de una celda.
'----------------------------------------------------------------------------------------------------
Private Function GetDVType(cell As Range) As Long
    If Not CellHasValidation(cell) Then
        GetDVType = 0
    Else
        GetDVType = cell.Validation.Type
    End If
End Function

'----------------------------------------------------------------------------------------------------
'Purpose: Regresa el nombre del tipo de la enumeración XlDVType
'----------------------------------------------------------------------------------------------------
Private Function GetDVTypeName(value As XlDVType) As String
    Dim Res As String
    Select Case value
    Case xlValidateInputOnly
        Res = "InputOnly"
    Case xlValidateWholeNumber
        Res = "Número Entero"
    Case xlValidateDecimal
        Res = "Decimal"
    Case xlValidateList
        Res = "Lista"
    Case xlValidateDate
        Res = "Fecha"
    Case xlValidateTime
        Res = "Hora"
    Case xlValidateTextLength
        Res = "Longitud del texto"
    Case xlValidateCustom
        Res = "Personalizada"
    End Select
    GetDVTypeName = Res
End Function

'----------------------------------------------------------------------------------------------------
'Purpose: Regresa un string con la información compartida entre algunos tipos de validación
'----------------------------------------------------------------------------------------------------
Private Function GetDVSharedTypesInfo(valob As Validation) As String
    Dim Res As String
    Res = Res & "Operador:""" & GetDVOperatorName(valob.operator) & """ "
    Res = Res & "Formula1:""" & valob.Formula1 & """ "
    If valob.Formula2 <> "" Then Res = Res & "Formula2:""" & valob.Formula2 & """ "
    GetDVSharedTypesInfo = Res
End Function

'----------------------------------------------------------------------------------------------------
'Purpose: Regresa un string con la información de validación específica del tipo Lista.
'----------------------------------------------------------------------------------------------------
Private Function GetDVListInfo(valob As Validation) As String
    Dim Res As String
    Res = Res & "Fuente:""" & valob.Formula1 & """ "
    Res = Res & "ListaEnCelda:" & valob.InCellDropdown & " "
    GetDVListInfo = Res
End Function

'----------------------------------------------------------------------------------------------------
'Purpose: Regresa un string con la información de validación específica del tipo Custom.
'----------------------------------------------------------------------------------------------------
Private Function GetDVCustomTypeInfo(valob As Validation) As String
    Dim Res As String
    Res = Res & "Formula:""" & valob.Formula1 & """ "
    GetDVCustomTypeInfo = Res
End Function

'----------------------------------------------------------------------------------------------------
'Purpose: Arma el string con las propiedades generales de todos los tipos de validación.
'----------------------------------------------------------------------------------------------------
Private Function GetDVGeneralInfo(valob As Validation) As String
    Dim Res As String
    Res = Res & "Mensaje=[" & GetDVInputInfo(valob) & "] "
    Res = Res & vbCrLf & " "
    
    Res = Res & "Advertencia=[" & GetDVAlertInfo(valob) & "] "
    Res = Res & vbCrLf & " "
    
    Res = Res & "OmitirBlancos:" & valob.IgnoreBlank & " "
    Res = Res & "DatoActualEsVálido:" & valob.value & " "
    GetDVGeneralInfo = Res
End Function

'----------------------------------------------------------------------------------------------------
'Purpose: Construye y regresa un string con la información del mensaje del objeto de validación.
'----------------------------------------------------------------------------------------------------
Private Function GetDVInputInfo(valob As Validation) As String
    Dim Res As String
    Res = Res & "Mostrar:" & valob.ShowInput & " "
    Res = Res & "Titulo:""" & valob.InputTitle & """ "
    Res = Res & "Mensaje:""" & Replace(valob.InputMessage, vbLf, "/") & """ "
    GetDVInputInfo = Res
End Function

'----------------------------------------------------------------------------------------------------
'Purpose: Construye y regresa un string con la información de la alerta del objeto de validación.
'----------------------------------------------------------------------------------------------------
Private Function GetDVAlertInfo(valob As Validation) As String
    Dim Res As String
    Res = Res & "Mostrar:" & valob.ShowError & " "
    Res = Res & "Titulo:""" & valob.ErrorTitle & """ "
    Res = Res & "Mensaje:""" & Replace(valob.ErrorMessage, vbLf, "/") & """ "
    Res = Res & "Estilo:" & GetAlertStyleName(valob.alertStyle) & " "
    GetDVAlertInfo = Res
End Function

'----------------------------------------------------------------------------------------------------
'Purpose: Regresa el nombre del tipo de la enum XlDVAlertStyle
'----------------------------------------------------------------------------------------------------
Private Function GetAlertStyleName(style As XlDVAlertStyle) As String
    Dim Res As String
    Select Case style
    Case xlValidAlertStop
        Res = "Grave"
    Case xlValidAlertWarning
        Res = "Advertencia"
    Case xlValidAlertInformation
        Res = "Información."
    End Select
    GetAlertStyleName = Res
End Function

'----------------------------------------------------------------------------------------------------
'Purpose: Regresa los nombres de los operadores.
'----------------------------------------------------------------------------------------------------
Private Function GetDVOperatorName(operator As Long) As String
    Dim Res As String
    Select Case operator
    Case 1
        Res = "Entre"
    Case 2
        Res = "No está entre"
    Case 3
        Res = "Igual a"
    Case 4
        Res = "No igual a"
    Case 5
        Res = "Mayor que"
    Case 6
        Res = "Menor que"
    Case 7
        Res = "Mayor o igual que"
    Case 8
        Res = "Menor o igual que"
    Case Else
        Res = "Desconocido"
    End Select
    GetDVOperatorName = Res
End Function
\\\--- END OF MODULE ---


** Fin del proceso de exportación. **
Lib_ExportToTxt [ExportToTxt.xls] v2.12.1
