Representación Textual del archivo de Excel: "InternalPasswordsRemover.xls"

Resumen
=======

 * Hojas: 1

 * Nombres Definidos: 0

 * Módulos de Visual Basic: 9

 * Líneas de código VB: 490

Detalle
=======

Hojas:
 [Sheet1]

Contenido:
[Sheet1]

Nombres:

Nombre del proyecto VB: [Lib_InternalPasswordsRemover]

Módulos VBA:
 [ThisWorkbook] Tipo: 100
 [Sheet1] Tipo: 100
 [Original] Tipo: 1
 [Iterador] Tipo: 2
 [Lib] Tipo: 1
 [IIteradorDelegates] Tipo: 2
 [IteradorDelegatesWrapper] Tipo: 2
 [InternalPasswordsRemover] Tipo: 2
 [LibClass] Tipo: 2

Codigo:
[ThisWorkbook] 5 líneas de código.
///--- BEGINNING OF MODULE ---
Option Explicit

Private Sub Workbook_BeforeSave(ByVal SaveAsUI As Boolean, Cancel As Boolean)
Application.Run "Personal.xlsb!ExportToTxt", ThisWorkbook
End Sub
\\\--- END OF MODULE ---

[Sheet1] 1 líneas de código.
///--- BEGINNING OF MODULE ---
Option Explicit
\\\--- END OF MODULE ---

[Original] 150 líneas de código.
///--- BEGINNING OF MODULE ---
Option Explicit

Public Sub AllInternalPasswords()
    ' Breaks worksheet and workbook structure passwords. Bob McCormick
    '  probably originator of base code algorithm modified for coverage
    '  of workbook structure / windows passwords and for multiple passwords
    '
    ' Norman Harker and JE McGimpsey 27-Dec-2002 (Version 1.1)
    ' Modified 2003-Apr-04 by JEM: All msgs to constants, and
    '   eliminate one Exit Sub (Version 1.1.1)
    ' Reveals hashed passwords NOT original passwords
    Const DBLSPACE As String = vbNewLine & vbNewLine
    Const AUTHORS As String = DBLSPACE & vbNewLine & _
            "Adapted from Bob McCormick base code by " & _
            "Norman Harker and JE McGimpsey"
    Const HEADER As String = "AllInternalPasswords User Message"
    Const VERSION As String = DBLSPACE & "Version 1.1.1 2003-Apr-04"
    Const REPBACK As String = DBLSPACE & "Please report failure " & _
            "to the microsoft.public.excel.programming newsgroup."
    Const ALLCLEAR As String = DBLSPACE & "The workbook should " & _
            "now be free of all password protection, so make sure you:" & _
            DBLSPACE & "SAVE IT NOW!" & DBLSPACE & "and also" & _
            DBLSPACE & "BACKUP!, BACKUP!!, BACKUP!!!" & _
            DBLSPACE & "Also, remember that the password was " & _
            "put there for a reason. Don't stuff up crucial formulas " & _
            "or data." & DBLSPACE & "Access and use of some data " & _
            "may be an offense. If in doubt, don't."
    Const MSGNOPWORDS1 As String = "There were no passwords on " & _
            "sheets, or workbook structure or windows." & AUTHORS & VERSION
    Const MSGNOPWORDS2 As String = "There was no protection to " & _
            "workbook structure or windows." & DBLSPACE & _
            "Proceeding to unprotect sheets." & AUTHORS & VERSION
    Const MSGTAKETIME As String = "After pressing OK button this " & _
            "will take some time." & DBLSPACE & "Amount of time " & _
            "depends on how many different passwords, the " & _
            "passwords, and your computer's specification." & DBLSPACE & _
            "Just be patient! Make me a coffee!" & AUTHORS & VERSION
    Const MSGPWORDFOUND1 As String = "You had a Worksheet " & _
            "Structure or Windows Password set." & DBLSPACE & _
            "The password found was: " & DBLSPACE & "$$" & DBLSPACE & _
            "Note it down for potential future use in other workbooks by " & _
            "the same person who set this password." & DBLSPACE & _
            "Now to check and clear other passwords." & AUTHORS & VERSION
    Const MSGPWORDFOUND2 As String = "You had a Worksheet " & _
            "password set." & DBLSPACE & "The password found was: " & _
            DBLSPACE & "$$" & DBLSPACE & "Note it down for potential " & _
            "future use in other workbooks by same person who " & _
            "set this password." & DBLSPACE & "Now to check and clear " & _
            "other passwords." & AUTHORS & VERSION
    Const MSGONLYONE As String = "Only structure / windows " & _
             "protected with the password that was just found." & _
             ALLCLEAR & AUTHORS & VERSION & REPBACK
    Dim w1 As Worksheet, w2 As Worksheet
    Dim i As Integer, j As Integer, k As Integer, l As Integer
    Dim m As Integer, n As Integer, i1 As Integer, i2 As Integer
    Dim i3 As Integer, i4 As Integer, i5 As Integer, i6 As Integer
    Dim PWord1 As String
    Dim ShTag As Boolean, Wintag As Boolean
    
    Application.ScreenUpdating = False
    With ActiveWorkbook
        Wintag = .ProtectStructure Or .ProtectWindows
    End With
    ShTag = False
    For Each w1 In Worksheets
            ShTag = ShTag Or w1.ProtectContents
    Next w1
    If Not ShTag And Not Wintag Then
        MsgBox MSGNOPWORDS1, vbInformation, HEADER
        Exit Sub
    End If
    MsgBox MSGTAKETIME, vbInformation, HEADER
    If Not Wintag Then
        MsgBox MSGNOPWORDS2, vbInformation, HEADER
    Else
      On Error Resume Next
      Do      'dummy do loop
        For i = 65 To 66: For j = 65 To 66: For k = 65 To 66
        For l = 65 To 66: For m = 65 To 66: For i1 = 65 To 66
        For i2 = 65 To 66: For i3 = 65 To 66: For i4 = 65 To 66
        For i5 = 65 To 66: For i6 = 65 To 66: For n = 32 To 126
        With ActiveWorkbook
          .Unprotect Chr(i) & Chr(j) & Chr(k) & _
             Chr(l) & Chr(m) & Chr(i1) & Chr(i2) & _
             Chr(i3) & Chr(i4) & Chr(i5) & Chr(i6) & Chr(n)
          If .ProtectStructure = False And _
          .ProtectWindows = False Then
              PWord1 = Chr(i) & Chr(j) & Chr(k) & Chr(l) & _
                Chr(m) & Chr(i1) & Chr(i2) & Chr(i3) & _
                Chr(i4) & Chr(i5) & Chr(i6) & Chr(n)
              MsgBox Application.Substitute(MSGPWORDFOUND1, _
                    "$$", PWord1), vbInformation, HEADER
              Exit Do  'Bypass all for...nexts
          End If
        End With
        Next: Next: Next: Next: Next: Next
        Next: Next: Next: Next: Next: Next
      Loop Until True
      On Error GoTo 0
    End If
    If Wintag And Not ShTag Then
      MsgBox MSGONLYONE, vbInformation, HEADER
      Exit Sub
    End If
    On Error Resume Next
    For Each w1 In Worksheets
      'Attempt clearance with PWord1
      w1.Unprotect PWord1
    Next w1
    On Error GoTo 0
    ShTag = False
    For Each w1 In Worksheets
      'Checks for all clear ShTag triggered to 1 if not.
      ShTag = ShTag Or w1.ProtectContents
    Next w1
    If ShTag Then
        For Each w1 In Worksheets
          With w1
            If .ProtectContents Then
              On Error Resume Next
              Do      'Dummy do loop
                For i = 65 To 66: For j = 65 To 66: For k = 65 To 66
                For l = 65 To 66: For m = 65 To 66: For i1 = 65 To 66
                For i2 = 65 To 66: For i3 = 65 To 66: For i4 = 65 To 66
                For i5 = 65 To 66: For i6 = 65 To 66: For n = 32 To 126
                .Unprotect Chr(i) & Chr(j) & Chr(k) & _
                  Chr(l) & Chr(m) & Chr(i1) & Chr(i2) & Chr(i3) & _
                  Chr(i4) & Chr(i5) & Chr(i6) & Chr(n)
                If Not .ProtectContents Then
                  PWord1 = Chr(i) & Chr(j) & Chr(k) & Chr(l) & _
                    Chr(m) & Chr(i1) & Chr(i2) & Chr(i3) & _
                    Chr(i4) & Chr(i5) & Chr(i6) & Chr(n)
                  MsgBox Application.Substitute(MSGPWORDFOUND2, _
                        "$$", PWord1), vbInformation, HEADER
                  'leverage finding Pword by trying on other sheets
                  For Each w2 In Worksheets
                    w2.Unprotect PWord1
                  Next w2
                  Exit Do  'Bypass all for...nexts
                End If
                Next: Next: Next: Next: Next: Next
                Next: Next: Next: Next: Next: Next
              Loop Until True
              On Error GoTo 0
            End If
          End With
        Next w1
    End If
    MsgBox ALLCLEAR & AUTHORS & VERSION & REPBACK, vbInformation, HEADER
End Sub
\\\--- END OF MODULE ---

[Iterador] 56 líneas de código.
///--- BEGINNING OF MODULE ---
Option Explicit
'----------------------------------------------------------------------------------------------------
'Clase Iterador
'----------------------------------------------------------------------------------------------------
'
'Clase que expone métodos de iteración de passwords y de hojas que reciben clases que implementan delegados.
'----------------------------------------------------------------------------------------------------

Function Passwords(Implementer As IIteradorDelegates, Optional SecondParam) As String
    Debug.Print ".-------------------------------------------------------------------------------"
    Debug.Print "| Iterador.Passwords()"
    
    Dim i As Integer, j As Integer, k As Integer, l As Integer
    Dim m As Integer, n As Integer, i1 As Integer, i2 As Integer
    Dim i3 As Integer, i4 As Integer, i5 As Integer, i6 As Integer
    Dim Password As String
    Dim Resultado As Boolean

    For i = 65 To 66: For j = 65 To 66: For k = 65 To 66
    For l = 65 To 66: For m = 65 To 66: For i1 = 65 To 66
    For i2 = 65 To 66: For i3 = 65 To 66: For i4 = 65 To 66
    For i5 = 65 To 66: For i6 = 65 To 66: For n = 32 To 126
        Password = Chr(i) & Chr(j) & Chr(k) & Chr(l) & Chr(m) & Chr(i1) & Chr(i2) & Chr(i3) & Chr(i4) & Chr(i5) & Chr(i6) & Chr(n)
        
        Resultado = Implementer.PasswordHandlerDelegate(Password, SecondParam)
        
        If Resultado Then
            Passwords = Password 'Regresamos la contraseña exitosa.
            GoTo Salida
        End If
        
        DoEvents
    Next: Next: Next: Next: Next: Next
    Next: Next: Next: Next: Next: Next

Salida:
    Debug.Print "'-- Iterador.Passwords() -----------------------------------------------------------"
End Function

Function Hojas(Optional Implementer As IIteradorDelegates, Optional SecondParam) As Boolean

    Debug.Print ".-------------------------------------------------------------------------------"
    Debug.Print "| Iterador.Hojas()"
        
    Dim w As Worksheet
    For Each w In Worksheets
    
        If Not Implementer Is Nothing Then
            Implementer.SheetHandlerDelegate w, SecondParam
        End If
    
        Hojas = Hojas Or w.ProtectContents
    Next w
    
    Debug.Print "'-- Iterador.Hojas() ----------------------------------------------------------"
End Function
\\\--- END OF MODULE ---

[Lib] 38 líneas de código.
///--- BEGINNING OF MODULE ---
'---------------------------------------------------------------------------------------
' Librería: Clase que elimina las contraseñas internas de protección de libro y hoja.
'---------------------------------------------------------------------------------------

Option Explicit
Public Const VERSION As String = "v1.0"
'---------------------------------------------------------------------------------------
Public Const LIB_NAME As String = "Lib_InternalPasswordsRemover"
Public Const LIB_FRIENDLY_NAME As String = "Eliminador de Passwords Internas"

Public ErrNum, ErrDesc

'----------------------------------------------------------------------------------------------------
'Purpose: Punto de entrada principal a la librería.
'----------------------------------------------------------------------------------------------------
Public Sub Main()
    Dim IPR As InternalPasswordsRemover
    Set IPR = GetLib().GetPasswordRemover()
    IPR.RemoveTodo
End Sub

'----------------------------------------------------------------------------------------------------
'Purpose: Regresa el objeto real de librería
'----------------------------------------------------------------------------------------------------
Public Function GetLib()
Debug.Print "> Inicio Lib.GetLib()"
On Error GoTo Outer_Error

    Set GetLib = New LibClass
On Error GoTo 0
Outer_Error: 'Error Handler v1.1 - 2013-06-19 by +
    If Err.Number <> 0 Then Debug.Print "[" & ThisWorkbook.Name & "!Lib.GetLib] " & Err.Number & ". " & Err.Description
    Debug.Print "> Fin Lib.GetLib()": Debug.Print
    'Descomentar si esta rutina se va a llamar desde otro módulo/proyecto:
    ErrNum = Err.Number: ErrDesc = Err.Description
End Function


\\\--- END OF MODULE ---

[IIteradorDelegates] 41 líneas de código.
///--- BEGINNING OF MODULE ---
Option Explicit
'----------------------------------------------------------------------------------------------------
'Interfase IIteradorDelegates
'----------------------------------------------------------------------------------------------------
'
'Define las firmas de los métodos que se utilizan como delegados en la clase Iterador.
'----------------------------------------------------------------------------------------------------

'Esta firma la usa el iterador de passwords. Regresa un booleano que cuando es verdadero, le indica al iterador de passwords que se detenga.
'Significa condición de éxito.
Public Function PasswordHandlerDelegate(pwd As String, Optional SecondParam) As Boolean

End Function

'Esta firma la usa el iterador de hojas.
Public Function SheetHandlerDelegate(w As Worksheet, Optional SecondParam)

End Function

'====================================================================================================
' Estos tres miembros que vamos a definir aquí, deberían de estar en otra Interfase, y deberíamos
' de heredarla, o implementarla.
' VBA no permite componer de esta forma, así que en lugar de hacer que esta Interfase local implemente otra,
' Declaramos los miembros directamente aquí.
' Así simulamos que esta interfase, 'Implements' otra interfase teórica llamada IDelegateWrapper
'====================================================================================================

'Implements IDelegateWrapper

Public Property Let ClassToWrap(value As Object)
    
End Property

Public Property Let MethodToCall(value As String)

End Property

Public Function GetDelegateWrapper(ob As Object, method As String) As IIteradorDelegates

End Function
'----------------------------------------------------------------------------------------------------
\\\--- END OF MODULE ---

[IteradorDelegatesWrapper] 47 líneas de código.
///--- BEGINNING OF MODULE ---
Option Explicit
'----------------------------------------------------------------------------------------------------
'Clase IIteradorDelegatesWrapper
'----------------------------------------------------------------------------------------------------
'
'Envuelve una clase específica y sus métodos que coincidan con los delegados de IIteradorDelegates:
'----------------------------------------------------------------------------------------------------
Implements IIteradorDelegates
'----------------------------------------------------------------------------------------------------

Private pClassToWrap As Object
Private pMethodToCall As String

Function IIteradorDelegates_PasswordHandlerDelegate(pwd As String, Optional SecondParam) As Boolean
    If Not IsMissing(SecondParam) Then
        IIteradorDelegates_PasswordHandlerDelegate = CallByName(pClassToWrap, pMethodToCall, VbMethod, pwd, SecondParam)
    Else
        IIteradorDelegates_PasswordHandlerDelegate = CallByName(pClassToWrap, pMethodToCall, VbMethod, pwd)
    End If
End Function

Function IIteradorDelegates_SheetHandlerDelegate(w As Worksheet, Optional SecondParam)
    If Not IsMissing(SecondParam) Then
        CallByName pClassToWrap, pMethodToCall, VbMethod, w, SecondParam
    Else
        CallByName pClassToWrap, pMethodToCall, VbMethod, w
    End If
End Function

'----------------------------------------------------------------------------------------------------
' IDelegateWrapper:
'----------------------------------------------------------------------------------------------------

Property Let IIteradorDelegates_ClassToWrap(value As Object)
    Set pClassToWrap = value
End Property

Property Let IIteradorDelegates_MethodToCall(value As String)
    pMethodToCall = value
End Property

Function IIteradorDelegates_GetDelegateWrapper(ob As Object, method As String) As IIteradorDelegates
    Dim NewWrapper As New IteradorDelegatesWrapper
    NewWrapper.IIteradorDelegates_ClassToWrap = ob
    NewWrapper.IIteradorDelegates_MethodToCall = method
    Set IIteradorDelegates_GetDelegateWrapper = NewWrapper
End Function
\\\--- END OF MODULE ---

[InternalPasswordsRemover] 147 líneas de código.
///--- BEGINNING OF MODULE ---
Option Explicit
'----------------------------------------------------------------------------------------------------
'Clase InternalPasswordRemover
'----------------------------------------------------------------------------------------------------
'
'Elimina las contraseñas internas de Excel para la protección de la estructura de los Libros y de las Hojas.
'----------------------------------------------------------------------------------------------------

Private Itera As Iterador
Private DelegateWrapper As IIteradorDelegates


'Constructor. Inicializa el Iterador.
Private Sub Class_Initialize()
    Set Itera = New Iterador
    Set DelegateWrapper = New IteradorDelegatesWrapper
End Sub

Public Sub RemoveTodo()
    Debug.Print ""
    Debug.Print " - Iniciando Proceso de eliminación de contraseñas internas - "
    
    Dim ShTag As Boolean
    
    Application.ScreenUpdating = False
    
    RemoveWorkbookProtection
    
    RemoveSheetsProtection
   
    Application.ScreenUpdating = True
    Debug.Print " - Proceso terminado - "
End Sub

Function RemoveWorkbookProtection() As Boolean
    If AssertBookProtection() Then
        Dim Password As String
        
        Debug.Print ""
        Debug.Print "Buscando contraseña para el libro..."
        
        Password = Itera.Passwords(DelegateWrapper.GetDelegateWrapper(Me, "UnprotectWorkbook"))
        
        Debug.Print "Encontrada contraseña para el libro: " & Password
        
        If AssertSheetsProtection() Then
            Debug.Print "Intentando usar la contraseña del libro para desproteger las hojas..."
            
            RemoveWorkbookProtection = Itera.Hojas(DelegateWrapper.GetDelegateWrapper(Me, "UnprotectOneWSheet"), Password)
        End If
    Else
        Debug.Print "Libro desprotegido."
    End If
End Function

Function RemoveSheetsProtection()
    If AssertSheetsProtection() Then
        Debug.Print ""
        Debug.Print "Desproteger las hojas."

        Itera.Hojas DelegateWrapper.GetDelegateWrapper(Me, "UnprotectWholeSheets")
    End If
End Function

Function AssertBookProtection() As Boolean
    AssertBookProtection = ActiveWorkbook.ProtectStructure Or ActiveWorkbook.ProtectWindows
End Function

Function AssertSheetsProtection() As Boolean
    AssertSheetsProtection = Itera.Hojas()
End Function

'====================================================================================================
' Sección de "Delegados"
' Métodos que se encapsulan en una clase que los representa como delegados. Se usan en el iterador.
'====================================================================================================

'----------------------------------------------------------------------------------------------------
' Métodos con firma compatible con el delegado para la iteración de contraseñas
'----------------------------------------------------------------------------------------------------

'Intenta desproteger un libro con una contraseña. Si es exitoso, regresa verdadero.
Function UnprotectWorkbook(PasswordToTry As String) As Boolean
    On Error Resume Next
    ActiveWorkbook.Unprotect PasswordToTry
    If Not AssertBookProtection() Then UnprotectWorkbook = True
End Function

'Intenta desproteger una hoja con una contraseña. Si es exitoso, regresa verdadero.
Function UnprotectSheet(PasswordToTry As String, SheetToUnprotect As Worksheet) As Boolean
    On Error Resume Next
    UnprotectOneWSheet SheetToUnprotect, PasswordToTry
    If Not SheetToUnprotect.ProtectContents Then UnprotectSheet = True
End Function

'----------------------------------------------------------------------------------------------------
' Métodos con firma compatible con el delegado para la iteración de hojas
'----------------------------------------------------------------------------------------------------

'Intenta desproteger una hoja con una contraseña específica.
Function UnprotectOneWSheet(w As Worksheet, PwdToTry As String)
On Error Resume Next
    Dim Message As String
    
    If Not w.ProtectContents Then
        Message = "[IW.UnprotectOneWSheet] Hoja " & w.Name & " no protegida."
    Else
        Message = "[IW.UnprotectOneWSheet] Desprotegiendo hoja " & w.Name & " usando " & PwdToTry & ". "
        w.Unprotect PwdToTry
        If Err.Number = 0 Then
            Message = Message & "Exitoso."
        Else
            'Message = Message & "Fallido."
            Message = ""
        End If
    End If
    If Message <> "" Then Debug.Print Message
End Function

'Busca la contraseña para una hoja.
'Cuando la encuentra intenta desproteger las restantes con esta misma.
Function UnprotectWholeSheets(w As Worksheet)
    Dim Password As String
    If w.ProtectContents Then
        Debug.Print "[IW.UnprotectWholeSheets] Hoja " & w.Name & " protegida. Buscando contraseña..."

        Password = Itera.Passwords(DelegateWrapper.GetDelegateWrapper(Me, "UnprotectSheet"), w)
        
        Debug.Print "[IW.UnprotectWholeSheets] Encontrada contraseña para la hoja " & w.Name & ": " & Password

        Debug.Print "[IW.UnprotectWholeSheets] Intentando usar la contraseña de la hoja para desproteger las restantes..."

        Itera.Hojas DelegateWrapper.GetDelegateWrapper(Me, "UnprotectOneWSheet"), Password
    Else
        Debug.Print "[IW.UnprotectWholeSheets] Hoja " & w.Name & " no protegida."
    End If
End Function

'====================================================================================================
' Fin de "Delegados"
'====================================================================================================

'Destructor.
Private Sub Class_Terminate()
    Set Itera = Nothing
    Set DelegateWrapper = Nothing
End Sub
\\\--- END OF MODULE ---

[LibClass] 5 líneas de código.
///--- BEGINNING OF MODULE ---
Option Explicit

Public Function GetPasswordRemover() As Object
Set GetPasswordRemover = New InternalPasswordsRemover
End Function
\\\--- END OF MODULE ---


** Fin del proceso de exportación. **
Lib_ExportToTxt [ExportToTxt.xls] v2.10 - 2013-06-17
